library(rJava)
# install.packages("RDRPOSTagger", repos = "http://www.datatailor.be/rcube", type = "source")
library(RDRPOSTagger)
# Define a function to write tagged data to text file
write_tagged_text <- function(tagged_text, output_file) {
writeLines(tagged_text, output_file)
}
# Function to tokenize and tag text
tag_and_write <- function(input_path, output_path, tagger) {
# Read the input text file
txt <- readLines(input_path, warn = FALSE)
# Initialize an empty vector to store tagged words
tagged_words <- character(0)
# Loop through words in txt
for (word in txt) {
# Attempt to tokenize and tag the word
tagged_text <- tryCatch({
# Tokenize and tag the word
tagged_word <- rdr_pos(tagger, x = word)
# Combine 'token' and 'pos' into a single string with the desired format
formatted_word <- paste(tagged_word$token, tagged_word$pos, sep = "\t")
formatted_word
}, error = function(e) {
#cat("Error occurred while processing word:", word, "\n")
#cat("Error message:", conditionMessage(e), "\n")
# Print the token with "PUNCT" separated by a tab if this error occurs (means, it is punctuation)
formatted_word <- paste(word, "PUNCT", sep = "\t")
formatted_word
})
# Append the tagged word to the vector
tagged_words <- c(tagged_words, tagged_text)
}
# Write tagged words to the output file
write_tagged_text(tagged_words, output_path)
cat("Tagged data has been written to the output file:", output_path, "\n")
}
# Create a tagger for UniversalPOS annotation
#ITTB
tagger <- rdr_model(language = "Latin-ITTB", annotation = "UniversalPOS")
# Define the paths
file_path <- "~/Desktop/BA_code/samples/tokenized.txt"
output_file <- "~/Desktop/BA_code/RDRPOSTagger/rdrpostagger_tokenized.txt"
# Perform tagging and writing for tokenized file
tag_and_write(file_path, output_file, tagger)
# Install and load required packages
# install.packages("rJava")
library(rJava)
# install.packages("RDRPOSTagger", repos = "http://www.datatailor.be/rcube", type = "source")
library(RDRPOSTagger)
# Define a function to write tagged data to text file
write_tagged_text <- function(tagged_text, output_file) {
writeLines(tagged_text, output_file)
}
# Function to tag tokenized text
tag_and_write <- function(tokenized_text, output_path, tagger) {
# Initialize an empty vector to store tagged words
tagged_words <- character(0)
# Loop through tokenized words
for (word in tokenized_text) {
# Attempt to tag the word
tagged_text <- tryCatch({
# Tag the word
tagged_word <- rdr_pos(tagger, x = word)
# Combine 'token' and 'pos' into a single string with the desired format
formatted_word <- paste(tagged_word$token, tagged_word$pos, sep = "\t")
formatted_word
}, error = function(e) {
# Handle any errors that may occur while tagging
cat("Error occurred while processing word:", word, "\n")
cat("Error message:", conditionMessage(e), "\n")
# In case of an error, you can decide how to handle it or simply skip the word.
# For now, let's skip the word.
formatted_word <- ""
formatted_word
})
# Append the tagged word to the vector
tagged_words <- c(tagged_words, tagged_text)
}
# Write tagged words to the output file
write_tagged_text(tagged_words, output_path)
cat("Tagged data has been written to the output file:", output_path, "\n")
}
# Create a tagger for UniversalPOS annotation
#ITTB
tagger <- rdr_model(language = "Latin-ITTB", annotation = "UniversalPOS")
# Define the paths
file_path <- "~/Desktop/BA_code/samples/tokenized.txt"
output_file <- "~/Desktop/BA_code/RDRPOSTagger/rdrpostagger_tokenized.txt"
# Perform tagging and writing for tokenized file
tag_and_write(file_path, output_file, tagger)
# Install and load required packages
# install.packages("rJava")
library(rJava)
# install.packages("RDRPOSTagger", repos = "http://www.datatailor.be/rcube", type = "source")
library(RDRPOSTagger)
# Define a function to write tagged data to text file
write_tagged_text <- function(tagged_text, output_file) {
writeLines(tagged_text, output_file)
}
# Function to tokenize and tag text
tag_and_write <- function(input_path, output_path, tagger) {
# Read the input text file
txt <- readLines(input_path, warn = FALSE)
# Initialize an empty vector to store tagged words
tagged_words <- character(0)
# Loop through words in txt
for (word in txt) {
# Attempt to tokenize and tag the word
tagged_text <- tryCatch({
# Tokenize and tag the word
tagged_word <- rdr_pos(tagger, x = word)
# Combine 'token' and 'pos' into a single string with the desired format
formatted_word <- paste(tagged_word$token, tagged_word$pos, sep = "\t")
formatted_word
}, error = function(e) {
#cat("Error occurred while processing word:", word, "\n")
#cat("Error message:", conditionMessage(e), "\n")
# Print the token with "PUNCT" separated by a tab if this error occurs (means, it is punctuation)
formatted_word <- paste(word, "PUNCT", sep = "\t")
formatted_word
})
# Append the tagged word to the vector
tagged_words <- c(tagged_words, tagged_text)
}
# Write tagged words to the output file
write_tagged_text(tagged_words, output_path)
cat("Tagged data has been written to the output file:", output_path, "\n")
}
# Create a tagger for UniversalPOS annotation
tagger <- rdr_model(language = "Latin-ITTB", annotation = "UniversalPOS")
# Define the paths
file_path <- "~/Desktop/BA_code/samples/tokenized.txt"
output_file <- "~/Desktop/BA_code/RDRPOSTagger/rdrpostagger_tokenized.txt"
# Perform tagging and writing for tokenized file
tag_and_write(file_path, output_file, tagger)
# Install and load required packages
# install.packages("rJava")
library(rJava)
# install.packages("RDRPOSTagger", repos = "http://www.datatailor.be/rcube", type = "source")
library(RDRPOSTagger)
# Define a function to write tagged data to text file
write_tagged_text <- function(tagged_text, output_file) {
writeLines(tagged_text, output_file)
}
# Function to tag tokenized text
tag_and_write <- function(input_words, output_path, tagger) {
# Initialize an empty vector to store tagged words
tagged_words <- character(0)
# Loop through words in input_words
for (word in input_words) {
# Attempt to tag the word
tagged_text <- tryCatch({
# Tag the word
tagged_word <- rdr_pos(tagger, x = word)
# Combine 'token' and 'pos' into a single string with the desired format
formatted_word <- paste(tagged_word$token, tagged_word$pos, sep = "\t")
formatted_word
}, error = function(e) {
# Handle any errors that may occur while tagging
cat("Error occurred while processing word:", word, "\n")
cat("Error message:", conditionMessage(e), "\n")
# In case of an error, you can decide how to handle it or simply skip the word.
# For now, let's skip the word.
formatted_word <- ""
formatted_word
})
# Append the tagged word to the vector
tagged_words <- c(tagged_words, tagged_text)
}
# Remove any empty strings
tagged_words <- tagged_words[tagged_words != ""]
# Write tagged words to the output file
write_tagged_text(tagged_words, output_path)
cat("Tagged data has been written to the output file:", output_path, "\n")
}
# Create a tagger for UniversalPOS annotation
tagger <- rdr_model(language = "Latin-ITTB", annotation = "UniversalPOS")
# Define the paths
input_words <- c("word1", "word2", "word3")  # Replace with your tokenized words
output_file <- "~/Desktop/BA_code/RDRPOSTagger/rdrpostagger_tokenized.txt"
# Perform tagging for tokenized words and write to the output file
tag_and_write(input_words, output_file, tagger)
# Install and load required packages
# install.packages("rJava")
library(rJava)
# install.packages("RDRPOSTagger", repos = "http://www.datatailor.be/rcube", type = "source")
library(RDRPOSTagger)
# Define a function to write tagged data to text file
write_tagged_text <- function(tagged_text, output_file) {
writeLines(tagged_text, output_file)
}
# Function to tag tokenized text
tag_and_write <- function(input_path, output_path, tagger) {
# Read the input text file containing tokenized words
txt <- readLines(input_path, warn = FALSE)
# Initialize an empty vector to store tagged words
tagged_words <- character(0)
# Loop through lines (tokens) in txt
for (line in txt) {
# Attempt to tag the word
tagged_text <- tryCatch({
# Tag the word
tagged_word <- rdr_pos(tagger, x = line)
# Combine 'token' and 'pos' into a single string with the desired format
formatted_word <- paste(tagged_word$token, tagged_word$pos, sep = "\t")
formatted_word
}, error = function(e) {
# Handle any errors that may occur while tagging
cat("Error occurred while processing word:", line, "\n")
cat("Error message:", conditionMessage(e), "\n")
# In case of an error, you can decide how to handle it or simply skip the word.
# For now, let's skip the word.
formatted_word <- ""
formatted_word
})
# Append the tagged word to the vector
tagged_words <- c(tagged_words, tagged_text)
}
# Remove any empty strings
tagged_words <- tagged_words[tagged_words != ""]
# Write tagged words to the output file
write_tagged_text(tagged_words, output_path)
cat("Tagged data has been written to the output file:", output_path, "\n")
}
# Create a tagger for UniversalPOS annotation
tagger <- rdr_model(language = "Latin-ITTB", annotation = "UniversalPOS")
# Define the paths
file_path <- "~/Desktop/BA_code/samples/tokenized.txt"
output_file <- "~/Desktop/BA_code/RDRPOSTagger/rdrpostagger_tokenized.txt"
# Perform tagging for tokenized words read from the file and write to the output file
tag_and_write(file_path, output_file, tagger)
# Install and load required packages
# install.packages("rJava")
library(rJava)
# install.packages("RDRPOSTagger", repos = "http://www.datatailor.be/rcube", type = "source")
library(RDRPOSTagger)
# Define a function to write tagged data to text file
write_tagged_text <- function(tagged_text, output_file) {
writeLines(tagged_text, output_file)
}
# Function to tag tokenized text
tag_and_write <- function(input_path, output_path, tagger) {
# Read the input text file containing tokenized words
txt <- readLines(input_path, warn = FALSE)
# Initialize an empty vector to store tagged words
tagged_words <- character(0)
# Loop through lines (tokens) in txt
for (line in txt) {
# Attempt to tag the word
tagged_text <- tryCatch({
# Tag the word
tagged_word <- rdr_pos(tagger, x = line)
# Combine 'token' and 'pos' into a single string with the desired format
formatted_word <- paste(tagged_word$token, tagged_word$pos, sep = "\t")
formatted_word
}, error = function(e) {
#cat("Error occurred while processing word:", word, "\n")
#cat("Error message:", conditionMessage(e), "\n")
# Print the token with "PUNCT" separated by a tab if this error occurs (means, it is punctuation)
formatted_word <- paste(word, "PUNCT", sep = "\t")
formatted_word
})
# Append the tagged word to the vector
tagged_words <- c(tagged_words, tagged_text)
}
# Remove any empty strings
tagged_words <- tagged_words[tagged_words != ""]
# Write tagged words to the output file
write_tagged_text(tagged_words, output_path)
cat("Tagged data has been written to the output file:", output_path, "\n")
}
# Create a tagger for UniversalPOS annotation
tagger <- rdr_model(language = "Latin-ITTB", annotation = "UniversalPOS")
# Define the paths
file_path <- "~/Desktop/BA_code/samples/tokenized.txt"
output_file <- "~/Desktop/BA_code/RDRPOSTagger/rdrpostagger_tokenized.txt"
# Perform tagging for tokenized words read from the file and write to the output file
tag_and_write(file_path, output_file, tagger)
# Install and load required packages
# install.packages("rJava")
library(rJava)
# install.packages("RDRPOSTagger", repos = "http://www.datatailor.be/rcube", type = "source")
library(RDRPOSTagger)
# Define a function to write tagged data to text file
write_tagged_text <- function(tagged_text, output_file) {
writeLines(tagged_text, output_file)
}
# Function to tag tokenized text
tag_and_write <- function(input_path, output_path, tagger) {
# Read the input text file containing tokenized words
txt <- readLines(input_path, warn = FALSE)
# Initialize an empty vector to store tagged words
tagged_words <- character(0)
# Loop through lines (tokens) in txt
for (line in txt) {
# Attempt to tag the word
tagged_text <- tryCatch({
# Tag the word
tagged_word <- rdr_pos(tagger, x = line)
# Combine 'token' and 'pos' into a single string with the desired format
formatted_word <- paste(tagged_word$token, tagged_word$pos, sep = "\t")
formatted_word
}, error = function(e) {
#cat("Error occurred while processing word:", word, "\n")
#cat("Error message:", conditionMessage(e), "\n")
# Print the token with "PUNCT" separated by a tab if this error occurs (means, it is punctuation)
formatted_word <- paste(line, "PUNCT", sep = "\t")
formatted_word
})
# Append the tagged word to the vector
tagged_words <- c(tagged_words, tagged_text)
}
# Remove any empty strings
tagged_words <- tagged_words[tagged_words != ""]
# Write tagged words to the output file
write_tagged_text(tagged_words, output_path)
cat("Tagged data has been written to the output file:", output_path, "\n")
}
# Create a tagger for UniversalPOS annotation
tagger <- rdr_model(language = "Latin-ITTB", annotation = "UniversalPOS")
# Define the paths
file_path <- "~/Desktop/BA_code/samples/tokenized.txt"
output_file <- "~/Desktop/BA_code/RDRPOSTagger/rdrpostagger_tokenized.txt"
# Perform tagging for tokenized words read from the file and write to the output file
tag_and_write(file_path, output_file, tagger)
# Install and load required packages
# install.packages("rJava")
library(rJava)
# install.packages("RDRPOSTagger", repos = "http://www.datatailor.be/rcube", type = "source")
library(RDRPOSTagger)
# Define a function to write tagged data to text file
write_tagged_text <- function(tagged_text, output_file) {
writeLines(tagged_text, output_file)
}
# Function to tag tokenized text
tag_and_write <- function(input_path, output_path, tagger) {
# Read the input text file containing tokenized words
txt <- readLines(input_path, warn = FALSE)
# Initialize an empty vector to store tagged words
tagged_words <- character(0)
# Loop through lines (tokens) in txt
for (line in txt) {
# Attempt to tag the word
tagged_text <- tryCatch({
# Tag the word
tagged_word <- rdr_pos(tagger, x = line)
print(tagged_word)
# Combine 'token' and 'pos' into a single string with the desired format
formatted_word <- paste(tagged_word$token, tagged_word$pos, sep = "\t")
formatted_word
}, error = function(e) {
#cat("Error occurred while processing word:", word, "\n")
#cat("Error message:", conditionMessage(e), "\n")
# Print the token with "PUNCT" separated by a tab if this error occurs (means, it is punctuation)
formatted_word <- paste(line, "PUNCT", sep = "\t")
formatted_word
})
# Append the tagged word to the vector
tagged_words <- c(tagged_words, tagged_text)
}
# Remove any empty strings
tagged_words <- tagged_words[tagged_words != ""]
# Write tagged words to the output file
write_tagged_text(tagged_words, output_path)
cat("Tagged data has been written to the output file:", output_path, "\n")
}
# Create a tagger for UniversalPOS annotation
tagger <- rdr_model(language = "Latin-ITTB", annotation = "UniversalPOS")
# Define the paths
file_path <- "~/Desktop/BA_code/samples/tokenized.txt"
output_file <- "~/Desktop/BA_code/RDRPOSTagger/rdrpostagger_tokenized.txt"
# Perform tagging for tokenized words read from the file and write to the output file
tag_and_write(file_path, output_file, tagger)
# Install and load required packages
# install.packages("rJava")
library(rJava)
# install.packages("RDRPOSTagger", repos = "http://www.datatailor.be/rcube", type = "source")
library(RDRPOSTagger)
# Define a function to write tagged data to text file
write_tagged_text <- function(tagged_text, output_file) {
writeLines(tagged_text, output_file)
}
# Function to tag tokenized text
tag_and_write <- function(input_path, output_path, tagger) {
# Read the input text file containing tokenized words
txt <- readLines(input_path, warn = FALSE)
# Initialize an empty vector to store tagged lines (tokens)
tagged_tokens <- character(0)
# Loop through lines (tokens) in txt
for (line in txt) {
# Attempt to tag the line as a token
tagged_text <- tryCatch({
# Tag the line (token)
tagged_line <- rdr_pos(tagger, x = line)
# Combine 'token' and 'pos' into a single string with the desired format
formatted_line <- paste(tagged_line$token, tagged_line$pos, sep = "\t")
formatted_line
}, error = function(e) {
#cat("Error occurred while processing word:", word, "\n")
#cat("Error message:", conditionMessage(e), "\n")
# Print the token with "PUNCT" separated by a tab if this error occurs (means, it is punctuation)
formatted_word <- paste(word, "PUNCT", sep = "\t")
formatted_word
})
# Append the tagged line (token) to the vector
tagged_tokens <- c(tagged_tokens, tagged_text)
}
# Remove any empty strings
tagged_tokens <- tagged_tokens[tagged_tokens != ""]
# Write tagged tokens to the output file
write_tagged_text(tagged_tokens, output_path)
cat("Tagged data has been written to the output file:", output_path, "\n")
}
# Create a tagger for UniversalPOS annotation
tagger <- rdr_model(language = "Latin-ITTB", annotation = "UniversalPOS")
# Define the paths
file_path <- "~/Desktop/BA_code/samples/tokenized.txt"
output_file <- "~/Desktop/BA_code/RDRPOSTagger/rdrpostagger_tokenized.txt"
# Perform tagging for tokenized lines (tokens) read from the file and write to the output file
tag_and_write(file_path, output_file, tagger)
# Install and load required packages
# install.packages("rJava")
library(rJava)
# install.packages("RDRPOSTagger", repos = "http://www.datatailor.be/rcube", type = "source")
library(RDRPOSTagger)
# Define a function to write tagged data to text file
write_tagged_text <- function(tagged_text, output_file) {
writeLines(tagged_text, output_file)
}
# Function to tag tokenized text
tag_and_write <- function(input_path, output_path, tagger) {
# Read the input text file containing tokenized words
txt <- readLines(input_path, warn = FALSE)
# Initialize an empty vector to store tagged lines (tokens)
tagged_tokens <- character(0)
# Loop through lines (tokens) in txt
for (line in txt) {
# Attempt to tag the line as a token
tagged_text <- tryCatch({
# Tag the line (token)
tagged_line <- rdr_pos(tagger, x = line)
# Combine 'token' and 'pos' into a single string with the desired format
formatted_line <- paste(tagged_line$token, tagged_line$pos, sep = "\t")
formatted_line
}, error = function(e) {
#cat("Error occurred while processing word:", word, "\n")
#cat("Error message:", conditionMessage(e), "\n")
# Print the token with "PUNCT" separated by a tab if this error occurs (means, it is punctuation)
formatted_word <- paste(line, "PUNCT", sep = "\t")
formatted_word
})
# Append the tagged line (token) to the vector
tagged_tokens <- c(tagged_tokens, tagged_text)
}
# Remove any empty strings
tagged_tokens <- tagged_tokens[tagged_tokens != ""]
# Write tagged tokens to the output file
write_tagged_text(tagged_tokens, output_path)
cat("Tagged data has been written to the output file:", output_path, "\n")
}
# Create a tagger for UniversalPOS annotation
tagger <- rdr_model(language = "Latin-ITTB", annotation = "UniversalPOS")
# Define the paths
file_path <- "~/Desktop/BA_code/samples/tokenized.txt"
output_file <- "~/Desktop/BA_code/RDRPOSTagger/rdrpostagger_tokenized.txt"
# Perform tagging for tokenized lines (tokens) read from the file and write to the output file
tag_and_write(file_path, output_file, tagger)
# Install and load required packages
# install.packages("rJava")
library(rJava)
# install.packages("RDRPOSTagger", repos = "http://www.datatailor.be/rcube", type = "source")
library(RDRPOSTagger)
# Define a function to write tagged data to text file
write_tagged_text <- function(tagged_text, output_file) {
writeLines(tagged_text, output_file)
}
# Function to tokenize and tag text
tag_and_write <- function(input_path, output_path, tagger) {
# Read the input text file
txt <- readLines(input_path, warn = FALSE)
# Initialize an empty vector to store tagged words
tagged_words <- character(0)
# Loop through words in txt
for (word in txt) {
# Attempt to tokenize and tag the word
tagged_text <- tryCatch({
# Tokenize and tag the word
tagged_word <- rdr_pos(tagger, x = word)
# Combine 'token' and 'pos' into a single string with the desired format
formatted_word <- paste(tagged_word$token, tagged_word$pos, sep = "\t")
formatted_word
}, error = function(e) {
#cat("Error occurred while processing word:", word, "\n")
#cat("Error message:", conditionMessage(e), "\n")
# Print the token with "PUNCT" separated by a tab if this error occurs (means, it is punctuation)
formatted_word <- paste(word, "PUNCT", sep = "\t")
formatted_word
})
# Append the tagged word to the vector
tagged_words <- c(tagged_words, tagged_text)
}
# Write tagged words to the output file
write_tagged_text(tagged_words, output_path)
cat("Tagged data has been written to the output file:", output_path, "\n")
}
# Create a tagger for UniversalPOS annotation
tagger <- rdr_model(language = "Latin-ITTB", annotation = "UniversalPOS")
# Define the paths
file_path <- "~/Desktop/BA_code/samples/tokenized.txt"
output_file <- "~/Desktop/BA_code/RDRPOSTagger/rdrpostagger_tokenized.txt"
# Perform tagging and writing for tokenized file
tag_and_write(file_path, output_file, tagger)
